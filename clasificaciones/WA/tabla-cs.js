// Configuraci√≥n por defecto
const config = {
    excludeKeywords: [
        'solicit√≥ unirse', 'sali√≥ del grupo', 'se uni√≥', 'null',
        'cambi√≥ tu c√≥digo de seguridad', 'creaste este grupo', 'cambi√≥ el asunto',
        'cambi√≥ la foto del grupo', 'elimin√≥ este mensaje', 'eliminaste este mensaje',
        'se uni√≥ usando el enlace de invitaci√≥n', 'el administrador cambi√≥ la configuraci√≥n del grupo',
        'el administrador cambi√≥ los permisos de los participantes',
        'el administrador cambi√≥ la configuraci√≥n de los mensajes temporales',
        'ahora eres admin. del grupo', 'te uniste desde la comunidad',
        'Toca para obtener m√°s informaci√≥n', 'Toca para cambiar esto',
        'se fue y no podr√° ver tu mensaje', 'se edit√≥ este mensaje',
        'se unieron desde la comunidad', 'cambiaste el nombre del grupo', 'cambiaste el √≠cono del grupo',
        'cambiaste los ajustes', 'activaste la aprobaci√≥n de los admins',
        'desactivaste la aprobaci√≥n de los admins', 'eliminaste a',
        'creaste el grupo', 'se elimin√≥ este mensaje',
        'se a√±adi√≥ a'
    ]
};

// Permite pasar excludeKeywords personalizado
function setExcludeKeywords(keywords) {
    config.excludeKeywords = keywords;
}

// La base de datos de equivalencias se cargar√° desde un archivo externo (equivalencias.js)
// Se espera que el archivo defina window.equivalencias
function normalizarRemitente(nombre) {
    if (window.equivalencias && typeof window.equivalencias === 'object') {
        return window.equivalencias[nombre] || nombre;
    }
    return nombre;
}

// --- Funci√≥n para aplicar modo oscuro a la tabla ---
function aplicarModoOscuroTabla() {
    const tabla = document.querySelector('.chat-top-table');
    if (!tabla) return;
    const dark = document.documentElement.getAttribute('data-theme') === 'dark';
    if (dark) {
        tabla.classList.add('tabla-modo-oscuro');
    } else {
        tabla.classList.remove('tabla-modo-oscuro');
    }
}

// Observar cambios de tema
const observer = new MutationObserver(aplicarModoOscuroTabla);
observer.observe(document.documentElement, { attributes: true, attributeFilter: ['data-theme'] });
// Tambi√©n aplicar al cargar
document.addEventListener('DOMContentLoaded', aplicarModoOscuroTabla);

async function analizarChat(urlArchivo, contenedorId, opciones = {}) {
    // Permitir configuraci√≥n personalizada por llamada
    if (Array.isArray(opciones.excludeKeywords)) {
        config.excludeKeywords = opciones.excludeKeywords;
    }
    try {
        const response = await fetch(urlArchivo);
        const texto = await response.text();
        const lineas = texto.split('\n');
        const contadores = {};
        const regexRemitente = / - (.*?):/;

        // Procesamiento por bloques (chunking)
        const chunkSize = 5000;
        let index = 0;

        function procesarChunk() {
            const regexSeAnadio = /se a√±adi√≥ a ~.*/i; // Excluir "Se a√±adi√≥ a ~..."
            const fin = Math.min(index + chunkSize, lineas.length);
            for (; index < fin; index++) {
                const linea = lineas[index];
                if (!linea || !linea.trim()) continue;
                const esMensajeValido = config.excludeKeywords.every(
                    keyword => !linea.includes(keyword)
                );
                // Filtro adicional para 'Se a√±adi√≥ a ~...'
                if (regexSeAnadio.test(linea)) continue;
                if (esMensajeValido) {
                    const match = linea.match(regexRemitente);
                    // Solo contar si hay remitente y no es un mensaje del sistema (remitente no inicia con invisible)
                    if (match && match[1] && !match[1].startsWith('‚Äé')) {
                        let remitente = match[1].trim();
                        remitente = normalizarRemitente(remitente);
                        contadores[remitente] = (contadores[remitente] || 0) + 1;
                    }
                }
            }
            if (index < lineas.length) {
                setTimeout(procesarChunk, 0); // Procesar el siguiente bloque
            } else {
                mostrarTop100(contadores, contenedorId);
            }
        }
        procesarChunk();
    } catch (error) {
        console.error("Error procesando el chat:", error);
        document.getElementById(contenedorId).innerHTML = 
            `<p class="error">Error cargando el archivo: ${error.message}</p>`;
    }
}

function mostrarTop100(contadores, contenedorId) {
    // Calcular total de mensajes
    const total = Object.values(contadores).reduce((a, b) => a + b, 0);
    // Mostrar el total si existe el elemento
    const totalMensajesEl = document.getElementById('total-mensajes');
    if (totalMensajesEl) {
        totalMensajesEl.textContent = `Total de mensajes: ${total.toLocaleString()}`;
    }

    const participantes = Object.entries(contadores)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 100);

    const getIcon = (index, total) => {
        if (index === 0) return 'üëë ';
        if (index === 1) return 'ü•à ';
        if (index === 2) return 'ü•â ';
        if (index === total - 1) return 'üòÖ ';
        return '';
    };

    const tablaHtml = `
    <table class="chat-top-table">
        <thead>
            <tr><th style="width:40px;text-align:center;">#</th><th>Usuario</th><th>Mensajes</th></tr>
        </thead>
        <tbody>
            ${participantes.map(([nombre, count], index) => `
                <tr>
                    <td style="text-align:center;">${index + 1}</td>
                    <td>${getIcon(index, participantes.length)}${nombre}</td>
                    <td>${count.toLocaleString()}</td>
                </tr>
            `).join('')}
        </tbody>
    </table>`;
    
    document.getElementById(contenedorId).innerHTML = tablaHtml;
}